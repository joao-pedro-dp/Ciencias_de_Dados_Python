'''
Formula da Regress√£o Linear Dicot√¥mica:

Basicamente,a formula √© quase id√™ntica √† num√©rica; no entanto, deve-se criar uma coluna transformando os valores booleanos em 1 e 0 para us√°-los na f√≥rmula.

Y = Œ≤0 + Œ≤1 * D 

Onde:
Y: √© o pre√ßo da casa (vari√°vel dependente).
D: √© a vari√°vel dicot√¥mica (0 ou 1).
ùõΩ0: √© o intercepto (o pre√ßo m√©dio quando D = 0, ou seja, "Ruim").
ùõΩ1: √© o coeficiente da vari√°vel dummy (quanto o pre√ßo muda quando D = 1, ou seja, "Bom").

Œ≤1 = (‚àë(Di - ŒºD) * (Yi - ŒºY)) / (‚àë(Di - D)^2)

Onde:
Di: s√£o os valores da vari√°vel dummy.
Yi: s√£o os valores da vari√°vel dependente (pre√ßo).
ŒºD: √© a m√©dia de D.
ŒºY: √© a m√©dia de Y.

Œ≤0 = ŒºY - Œ≤1 * ŒºD

Onde:
B1: √© a Formula de cima
ŒºD: √© a m√©dia de D.
ŒºY: √© a m√©dia de Y.

MAE = (1/M) * Œ£ |Yi - ≈∂i|
MSE = (1/M) * Œ£ (Yi - ≈∂i)^2
RMSE = sqrt(MSE)
RMSE = sqrt( (1/M) * Œ£ (Yi - ≈∂i)^2 )
R¬≤ = 1 - (Œ£ (Yi - ≈∂i)^2 / Œ£ (Yi - ŒºY)^2)

Onde:

M: √© o n√∫mero de observa√ß√µes,
Yi: s√£o os valores reais,
≈∂i: s√£o os valores previstos pelo modelo.
'''

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

casas = [{"avaliacao": "Ruim", "preco": 240000},{"avaliacao": "Bom", "preco": 320000},{"avaliacao": "Ruim", "preco": 400000},
        {"avaliacao": "Bom", "preco": 485000},{"avaliacao": "Ruim", "preco": 550000},{"avaliacao": "Bom", "preco": 625000},
        {"avaliacao": "Bom", "preco": 700000},{"avaliacao": "Bom", "preco": 775000},{"avaliacao": "Bom", "preco": 850000},
        {"avaliacao": "Bom", "preco": 925000},{"avaliacao": "Bom", "preco": 1000000},{"avaliacao": "Ruim", "preco": 1075000},
        {"avaliacao": "Bom", "preco": 1150000},{"avaliacao": "Bom", "preco": 1225000},{"avaliacao": "Bom", "preco": 1300000},
        {"avaliacao": "Ruim", "preco": 1375000},{"avaliacao": "Bom", "preco": 1450000},{"avaliacao": "Ruim", "preco": 1525000},
        {"avaliacao": "Bom", "preco": 1600000},{"avaliacao": "Bom", "preco": 1800000},{"avaliacao": "Bom", "preco": 2000000}
        ]

df = pd.DataFrame(casas)

# Criando uma coluna booleana dummy com base na avalia√ß√£o
df.loc[df['avaliacao'] == "Ruim", 'D'] = 0
df.loc[df['avaliacao'] == "Bom", 'D'] = 1

# Coletando os valores necess√°rios para as f√≥rmulas:
mean_D = np.mean(df['D'])
Di_meanD= df['D'] - mean_D
mean_Y = np.mean(df['preco'])
Yi = df['preco']
mean_Y_Yi = Yi - mean_Y
sum_Di_meanD_mean_Y_Yi = np.sum(Di_meanD * mean_Y_Yi)
squared_sum_Di_meanD = np.sum(Di_meanD**2)

Œ≤1 = (sum_Di_meanD_mean_Y_Yi / squared_sum_Di_meanD)

Œ≤0 = (mean_Y - Œ≤1 * mean_D)

# Calculando os erros
df['preco_previsto'] = Œ≤0 + Œ≤1 * df['D']
MAE = np.mean(np.abs(df['preco'] - df['preco_previsto']))
MSE = np.mean((df['preco'] - df['preco_previsto']) ** 2)
RMSE = np.sqrt(MSE)
SSE = sum((df['preco'] - df['preco_previsto']) ** 2)
SST = sum((df['preco'] - mean_Y) ** 2)
R2 = 1 - (SSE / SST)

# Input para receber uma avalia√ß√£o (D)
D = int(input("Informe a avalia√ß√£o da casa que deseja saber o pre√ßo aproximado (0 para 'Ruim' e 1 para 'Bom'): "))

# Calculando o pre√ßo aproximado para a avalia√ß√£o fornecida
Y = Œ≤0 + Œ≤1 * D

print(f"O pre√ßo aproximado da casa com avalia√ß√£o {D} (0 para 'Ruim' ou 1 para 'Bom') √©: R${Y}")
print(f"RMSE: {RMSE}")
print(f"R^2: {R2}")
print(f"O pre√ßo aproximado da casa com avalia√ß√£o {D} √©: R${Y}")

# Gr√°fico da regress√£o linear com erro

# Adicionando pontos reais
plt.figure(figsize=(10,5))
plt.scatter(df['D'], df['preco'], label="Dados Reais", color="blue")  
plt.plot(df['D'], df['preco_previsto'], label="Regress√£o Linear Dicot√¥mica", color="red")  

# Adicionando linha de erro
for i in range(len(df)):
    plt.vlines(x=df['D'][i], ymin=df['preco_previsto'][i], ymax=df['preco'][i], color='gray', linestyle='dotted')

# Adicionando ponto de previs√£o do usu√°rio
plt.scatter(D, Y, color='green', s=200, label=f"Resultado Avalia√ß√£o {D}", edgecolors='black', zorder=5)  

plt.title("Regress√£o Linear Dicot√¥mica do Valor das Casas")
plt.xlabel("Avalia√ß√£o")
plt.ylabel("Pre√ßo")
plt.legend()
plt.show()
